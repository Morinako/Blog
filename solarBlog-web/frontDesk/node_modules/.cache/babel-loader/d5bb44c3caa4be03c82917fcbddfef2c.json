{"remainingRequest":"D:\\solarBlog-master\\solarBlog-master\\solarBlog-web\\frontDesk\\node_modules\\babel-loader\\lib\\index.js!D:\\solarBlog-master\\solarBlog-master\\solarBlog-web\\frontDesk\\node_modules\\vuetify\\lib\\util\\color\\transformSRGB.js","dependencies":[{"path":"D:\\solarBlog-master\\solarBlog-master\\solarBlog-web\\frontDesk\\node_modules\\vuetify\\lib\\util\\color\\transformSRGB.js","mtime":499162500000},{"path":"D:\\solarBlog-master\\solarBlog-master\\solarBlog-web\\frontDesk\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\solarBlog-master\\solarBlog-master\\solarBlog-web\\frontDesk\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmZyb21YWVogPSBmcm9tWFlaOwpleHBvcnRzLnRvWFlaID0gdG9YWVo7Cgp2YXIgX2hlbHBlcnMgPSByZXF1aXJlKCIuLi8uLi91dGlsL2hlbHBlcnMiKTsKCi8vIEZvciBjb252ZXJ0aW5nIFhZWiB0byBzUkdCCnZhciBzcmdiRm9yd2FyZE1hdHJpeCA9IFtbMy4yNDA2LCAtMS41MzcyLCAtMC40OTg2XSwgWy0wLjk2ODksIDEuODc1OCwgMC4wNDE1XSwgWzAuMDU1NywgLTAuMjA0MCwgMS4wNTcwXV07IC8vIEZvcndhcmQgZ2FtbWEgYWRqdXN0Cgp2YXIgc3JnYkZvcndhcmRUcmFuc2Zvcm0gPSBmdW5jdGlvbiBzcmdiRm9yd2FyZFRyYW5zZm9ybShDKSB7CiAgcmV0dXJuIEMgPD0gMC4wMDMxMzA4ID8gQyAqIDEyLjkyIDogMS4wNTUgKiBNYXRoLnBvdyhDLCAxIC8gMi40KSAtIDAuMDU1Owp9OyAvLyBGb3IgY29udmVydGluZyBzUkdCIHRvIFhZWgoKCnZhciBzcmdiUmV2ZXJzZU1hdHJpeCA9IFtbMC40MTI0LCAwLjM1NzYsIDAuMTgwNV0sIFswLjIxMjYsIDAuNzE1MiwgMC4wNzIyXSwgWzAuMDE5MywgMC4xMTkyLCAwLjk1MDVdXTsgLy8gUmV2ZXJzZSBnYW1tYSBhZGp1c3QKCnZhciBzcmdiUmV2ZXJzZVRyYW5zZm9ybSA9IGZ1bmN0aW9uIHNyZ2JSZXZlcnNlVHJhbnNmb3JtKEMpIHsKICByZXR1cm4gQyA8PSAwLjA0MDQ1ID8gQyAvIDEyLjkyIDogTWF0aC5wb3coKEMgKyAwLjA1NSkgLyAxLjA1NSwgMi40KTsKfTsKCmZ1bmN0aW9uIGZyb21YWVooeHl6KSB7CiAgdmFyIHJnYiA9IEFycmF5KDMpOwogIHZhciB0cmFuc2Zvcm0gPSBzcmdiRm9yd2FyZFRyYW5zZm9ybTsKICB2YXIgbWF0cml4ID0gc3JnYkZvcndhcmRNYXRyaXg7IC8vIE1hdHJpeCB0cmFuc2Zvcm0sIHRoZW4gZ2FtbWEgYWRqdXN0bWVudAoKICBmb3IgKHZhciBpID0gMDsgaSA8IDM7ICsraSkgewogICAgcmdiW2ldID0gTWF0aC5yb3VuZCgoMCwgX2hlbHBlcnMuY2xhbXApKHRyYW5zZm9ybShtYXRyaXhbaV1bMF0gKiB4eXpbMF0gKyBtYXRyaXhbaV1bMV0gKiB4eXpbMV0gKyBtYXRyaXhbaV1bMl0gKiB4eXpbMl0pKSAqIDI1NSk7CiAgfSAvLyBSZXNjYWxlIGJhY2sgdG8gWzAsIDI1NV0KCgogIHJldHVybiAocmdiWzBdIDw8IDE2KSArIChyZ2JbMV0gPDwgOCkgKyAocmdiWzJdIDw8IDApOwp9CgpmdW5jdGlvbiB0b1hZWihyZ2IpIHsKICB2YXIgeHl6ID0gWzAsIDAsIDBdOwogIHZhciB0cmFuc2Zvcm0gPSBzcmdiUmV2ZXJzZVRyYW5zZm9ybTsKICB2YXIgbWF0cml4ID0gc3JnYlJldmVyc2VNYXRyaXg7IC8vIFJlc2NhbGUgZnJvbSBbMCwgMjU1XSB0byBbMCwgMV0gdGhlbiBhZGp1c3Qgc1JHQiBnYW1tYSB0byBsaW5lYXIgUkdCCgogIHZhciByID0gdHJhbnNmb3JtKChyZ2IgPj4gMTYgJiAweGZmKSAvIDI1NSk7CiAgdmFyIGcgPSB0cmFuc2Zvcm0oKHJnYiA+PiA4ICYgMHhmZikgLyAyNTUpOwogIHZhciBiID0gdHJhbnNmb3JtKChyZ2IgPj4gMCAmIDB4ZmYpIC8gMjU1KTsgLy8gTWF0cml4IGNvbG9yIHNwYWNlIHRyYW5zZm9ybQoKICBmb3IgKHZhciBpID0gMDsgaSA8IDM7ICsraSkgewogICAgeHl6W2ldID0gbWF0cml4W2ldWzBdICogciArIG1hdHJpeFtpXVsxXSAqIGcgKyBtYXRyaXhbaV1bMl0gKiBiOwogIH0KCiAgcmV0dXJuIHh5ejsKfQ=="},{"version":3,"sources":["../../../src/util/color/transformSRGB.ts"],"names":[],"mappings":";;;;;;;;AACA;;AAEA;AACA,IAAM,iBAAiB,GAAG,CACxB,CAAA,MAAA,EAAS,CAAT,MAAA,EAAkB,CADM,MACxB,CADwB,EAExB,CAAC,CAAD,MAAA,EAAA,MAAA,EAFwB,MAExB,CAFwB,EAGxB,CAAA,MAAA,EAAS,CAAT,MAAA,EAHF,MAGE,CAHwB,CAA1B,C,CAMA;;AACA,IAAM,oBAAoB,GAAI,SAAxB,oBAAwB,CAAA,CAAD;AAAA,SAC3B,CAAC,IAAD,SAAA,GACI,CAAC,GADL,KAAA,GAEI,iBAAQ,CAAR,EAAc,IAAd,GAAA,IAHN,KAA6B;AAAA,CAA7B,C,CAMA;;;AACA,IAAM,iBAAiB,GAAG,CACxB,CAAA,MAAA,EAAA,MAAA,EADwB,MACxB,CADwB,EAExB,CAAA,MAAA,EAAA,MAAA,EAFwB,MAExB,CAFwB,EAGxB,CAAA,MAAA,EAAA,MAAA,EAHF,MAGE,CAHwB,CAA1B,C,CAMA;;AACA,IAAM,oBAAoB,GAAI,SAAxB,oBAAwB,CAAA,CAAD;AAAA,SAC3B,CAAC,IAAD,OAAA,GACI,CAAC,GADL,KAAA,YAEK,CAAC,CAAC,GAAF,KAAA,IAAD,KAFJ,EADF,GACE,CAD2B;AAAA,CAA7B;;AAMM,SAAA,OAAA,CAAA,GAAA,EAA2B;AAC/B,MAAM,GAAG,GAAG,KAAK,CAAjB,CAAiB,CAAjB;AACA,MAAM,SAAS,GAAf,oBAAA;AACA,MAAM,MAAM,GAHmB,iBAG/B,CAH+B,CAK/B;;AACA,OAAK,IAAI,CAAC,GAAV,CAAA,EAAgB,CAAC,GAAjB,CAAA,EAAuB,EAAvB,CAAA,EAA4B;AAC1B,IAAA,GAAG,CAAH,CAAG,CAAH,GAAS,IAAI,CAAJ,KAAA,CAAW,oBAAM,SAAS,CACjC,MAAM,CAAN,CAAM,CAAN,CAAA,CAAA,IAAe,GAAG,CAAlB,CAAkB,CAAlB,GACA,MAAM,CAAN,CAAM,CAAN,CAAA,CAAA,IAAe,GAAG,CADlB,CACkB,CADlB,GAEA,MAAM,CAAN,CAAM,CAAN,CAAA,CAAA,IAAe,GAAG,CAHA,CAGA,CAHe,CAAf,IAApB,GAAS,CAAT;AAP6B,GAAA,CAc/B;;;AACA,SAAO,CAAC,GAAG,CAAH,CAAG,CAAH,IAAD,EAAA,KAAkB,GAAG,CAAH,CAAG,CAAH,IAAlB,CAAA,KAAkC,GAAG,CAAH,CAAG,CAAH,IAAzC,CAAO,CAAP;AACD;;AAEK,SAAA,KAAA,CAAA,GAAA,EAA8B;AAClC,MAAM,GAAG,GAAQ,CAAA,CAAA,EAAA,CAAA,EAAjB,CAAiB,CAAjB;AACA,MAAM,SAAS,GAAf,oBAAA;AACA,MAAM,MAAM,GAHsB,iBAGlC,CAHkC,CAKlC;;AACA,MAAM,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,IAAH,EAAA,GAAD,IAAA,IAApB,GAAmB,CAAnB;AACA,MAAM,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,IAAH,CAAA,GAAD,IAAA,IAApB,GAAmB,CAAnB;AACA,MAAM,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,IAAH,CAAA,GAAD,IAAA,IARc,GAQf,CAAnB,CARkC,CAUlC;;AACA,OAAK,IAAI,CAAC,GAAV,CAAA,EAAgB,CAAC,GAAjB,CAAA,EAAuB,EAAvB,CAAA,EAA4B;AAC1B,IAAA,GAAG,CAAH,CAAG,CAAH,GAAS,MAAM,CAAN,CAAM,CAAN,CAAA,CAAA,IAAA,CAAA,GAAmB,MAAM,CAAN,CAAM,CAAN,CAAA,CAAA,IAAnB,CAAA,GAAsC,MAAM,CAAN,CAAM,CAAN,CAAA,CAAA,IAA/C,CAAA;AACD;;AAED,SAAA,GAAA;AACD","sourcesContent":["import { ColorInt, XYZ } from '../colorUtils'\nimport { clamp } from '../../util/helpers'\n\n// For converting XYZ to sRGB\nconst srgbForwardMatrix = [\n  [3.2406, -1.5372, -0.4986],\n  [-0.9689, 1.8758, 0.0415],\n  [0.0557, -0.2040, 1.0570],\n]\n\n// Forward gamma adjust\nconst srgbForwardTransform = (C: number): number => (\n  C <= 0.0031308\n    ? C * 12.92\n    : 1.055 * C ** (1 / 2.4) - 0.055\n)\n\n// For converting sRGB to XYZ\nconst srgbReverseMatrix = [\n  [0.4124, 0.3576, 0.1805],\n  [0.2126, 0.7152, 0.0722],\n  [0.0193, 0.1192, 0.9505],\n]\n\n// Reverse gamma adjust\nconst srgbReverseTransform = (C: number): number => (\n  C <= 0.04045\n    ? C / 12.92\n    : ((C + 0.055) / 1.055) ** 2.4\n)\n\nexport function fromXYZ (xyz: XYZ): ColorInt {\n  const rgb = Array(3)\n  const transform = srgbForwardTransform\n  const matrix = srgbForwardMatrix\n\n  // Matrix transform, then gamma adjustment\n  for (let i = 0; i < 3; ++i) {\n    rgb[i] = Math.round(clamp(transform(\n      matrix[i][0] * xyz[0] +\n      matrix[i][1] * xyz[1] +\n      matrix[i][2] * xyz[2]\n    )) * 255)\n  }\n\n  // Rescale back to [0, 255]\n  return (rgb[0] << 16) + (rgb[1] << 8) + (rgb[2] << 0)\n}\n\nexport function toXYZ (rgb: ColorInt): XYZ {\n  const xyz: XYZ = [0, 0, 0]\n  const transform = srgbReverseTransform\n  const matrix = srgbReverseMatrix\n\n  // Rescale from [0, 255] to [0, 1] then adjust sRGB gamma to linear RGB\n  const r = transform((rgb >> 16 & 0xff) / 255)\n  const g = transform((rgb >> 8 & 0xff) / 255)\n  const b = transform((rgb >> 0 & 0xff) / 255)\n\n  // Matrix color space transform\n  for (let i = 0; i < 3; ++i) {\n    xyz[i] = matrix[i][0] * r + matrix[i][1] * g + matrix[i][2] * b\n  }\n\n  return xyz\n}\n"],"sourceRoot":""}]}