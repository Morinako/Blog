{"remainingRequest":"D:\\solarBlog-master\\solarBlog-master\\solarBlog-web\\frontDesk\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\solarBlog-master\\solarBlog-master\\solarBlog-web\\frontDesk\\src\\components\\Reply.vue?vue&type=style&index=0&id=56270c2c&scoped=true&lang=css&","dependencies":[{"path":"D:\\solarBlog-master\\solarBlog-master\\solarBlog-web\\frontDesk\\src\\components\\Reply.vue","mtime":1692914156000},{"path":"D:\\solarBlog-master\\solarBlog-master\\solarBlog-web\\frontDesk\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\solarBlog-master\\solarBlog-master\\solarBlog-web\\frontDesk\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\solarBlog-master\\solarBlog-master\\solarBlog-web\\frontDesk\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\solarBlog-master\\solarBlog-master\\solarBlog-web\\frontDesk\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1574476662000},{"path":"D:\\solarBlog-master\\solarBlog-master\\solarBlog-web\\frontDesk\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\solarBlog-master\\solarBlog-master\\solarBlog-web\\frontDesk\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLnJlcGx5LWlucHV0LXdyYXBwZXIgewogIGJvcmRlcjogMXB4IHNvbGlkICM5MDkzOTk1MDsKICBib3JkZXItcmFkaXVzOiA0cHg7CiAgcGFkZGluZzogMTBweDsKICBtYXJnaW46IDAgMCAxMHB4Owp9Cg=="},{"version":3,"sources":["Reply.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsGA;AACA;AACA;AACA;AACA;AACA","file":"Reply.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"reply-input-wrapper\" style=\"display: none\" ref=\"reply\">\n    <textarea\n      class=\"comment-textarea\"\n      :placeholder=\"'回复 @' + nickname + '：'\"\n      auto-grow\n      dense\n      v-model=\"commentContent\"\n    />\n    <div class=\"emoji-container\">\n      <span\n        :class=\"chooseEmoji ? 'emoji-btn-active' : 'emoji-btn'\"\n        @click=\"chooseEmoji = !chooseEmoji\"\n      >\n        <i class=\"iconfont iconbiaoqing\" />\n      </span>\n      <div style=\"margin-left:auto\">\n        <button @click=\"cancleReply\" class=\"cancle-btn v-comment-btn\">\n          取消\n        </button>\n        <button @click=\"insertReply\" class=\"upload-btn v-comment-btn\">\n          提交\n        </button>\n      </div>\n    </div>\n    <!-- 表情框 -->\n    <emoji @addEmoji=\"addEmoji\" :chooseEmoji=\"chooseEmoji\"></emoji>\n  </div>\n</template>\n\n<script>\nimport Emoji from \"./Emoji\";\nimport EmojiList from \"../assets/js/emoji\";\nexport default {\n  components: {\n    Emoji\n  },\n  data: function() {\n    return {\n      index: 0,\n      chooseEmoji: false,\n      nickname: \"\",\n      replyUserId: null,\n      parentId: null,\n      commentContent: \"\"\n    };\n  },\n  methods: {\n    cancleReply() {\n      this.$refs.reply.style.display = \"none\";\n    },\n    insertReply() {\n      //判断登录\n      if (!this.$store.state.userId) {\n        this.$store.state.loginFlag = true;\n        return false;\n      }\n      if (this.commentContent.trim() === \"\") {\n        this.$toast({ type: \"error\", message: \"回复不能为空\" });\n        return false;\n      }\n      //解析表情\n      var reg = /\\[.+?\\]/g;\n      this.commentContent = this.commentContent.replace(reg, function(str) {\n        return (\n          \"<img src= '\" +\n          EmojiList[str] +\n          \"' width='22'height='20' style='padding: 0 1px'/>\"\n        );\n      });\n      const path = this.$route.path;\n      const arr = path.split(\"/\");\n      var comment = {\n        articleId: arr[2],\n        replyUserId: this.replyUserId,\n        parentId: this.parentId,\n        commentContent: this.commentContent\n      };\n      this.commentContent = \"\";\n      this.axios.post(\"/api/comments\", comment).then(({ data }) => {\n        if (data.flag) {\n          this.$emit(\"reloadReply\", this.index);\n          const isReview = this.$store.state.blogInfo.websiteConfig\n                  .isCommentReview;\n          if (isReview) {\n            this.$toast({ type: \"warnning\", message: \"回复成功,请等待审核！\" });\n          } else {\n            this.$toast({ type: \"success\", message: \"回复成功！\" });\n          }\n        } else {\n          this.$toast({ type: \"error\", message: data.message });\n        }\n      });\n    },\n    addEmoji(text) {\n      this.commentContent += text;\n    }\n  }\n};\n</script>\n\n<style scoped>\n.reply-input-wrapper {\n  border: 1px solid #90939950;\n  border-radius: 4px;\n  padding: 10px;\n  margin: 0 0 10px;\n}\n</style>\n"]}]}