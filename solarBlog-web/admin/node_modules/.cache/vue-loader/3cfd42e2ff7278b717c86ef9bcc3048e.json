{"remainingRequest":"D:\\solarBlog-master\\solarBlog-master\\solarBlog-web\\admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\solarBlog-master\\solarBlog-master\\solarBlog-web\\admin\\src\\views\\siteNavigation\\siteNavigation.vue?vue&type=template&id=4acaf182&scoped=true&","dependencies":[{"path":"D:\\solarBlog-master\\solarBlog-master\\solarBlog-web\\admin\\src\\views\\siteNavigation\\siteNavigation.vue","mtime":1692914156000},{"path":"D:\\solarBlog-master\\solarBlog-master\\solarBlog-web\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\solarBlog-master\\solarBlog-master\\solarBlog-web\\admin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\solarBlog-master\\solarBlog-master\\solarBlog-web\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\solarBlog-master\\solarBlog-master\\solarBlog-web\\admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}