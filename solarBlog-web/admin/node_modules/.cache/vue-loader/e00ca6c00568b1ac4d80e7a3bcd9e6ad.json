{"remainingRequest":"D:\\solarBlog-master\\solarBlog-master\\solarBlog-web\\admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\solarBlog-master\\solarBlog-master\\solarBlog-web\\admin\\src\\views\\siteNavigation\\siteNavigation.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\solarBlog-master\\solarBlog-master\\solarBlog-web\\admin\\src\\views\\siteNavigation\\siteNavigation.vue","mtime":1692914156000},{"path":"D:\\solarBlog-master\\solarBlog-master\\solarBlog-web\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\solarBlog-master\\solarBlog-master\\solarBlog-web\\admin\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\solarBlog-master\\solarBlog-master\\solarBlog-web\\admin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\solarBlog-master\\solarBlog-master\\solarBlog-web\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\solarBlog-master\\solarBlog-master\\solarBlog-web\\admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}